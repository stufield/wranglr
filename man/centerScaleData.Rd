% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/centerScaleData.R
\name{centerScaleData}
\alias{centerScaleData}
\alias{is.centerScaled}
\alias{undoCenterScale}
\title{Center and/or Scale Data}
\usage{
centerScaleData(
  data,
  par_tbl = NULL,
  center = TRUE,
  scale = TRUE,
  ref.data = deprecated()
)

is.centerScaled(data)

undoCenterScale(data)
}
\arguments{
\item{data}{A \code{soma_adat}, tibble, data frame, or matrix object with
named RFU data to center and/or scale.}

\item{par_tbl}{A tibble containing the mean and standard deviations
to use in processing the data. Must also contain an \code{AptName} column
to synchronize the features with their corresponding scaling parameters.
If \code{NULL}, a parameter table is generated based on \code{data},
i.e. \code{data} is its own reference.}

\item{center}{Logical. Indicating whether the variables
should be shifted to be zero centered (\eqn{\mu = 0}).}

\item{scale}{Logical. Indicating whether the variables
should be scaled to have unit variance (\eqn{\sigma = 1}).}

\item{ref.data}{Discouraged. Now preferred to pass \code{par_tbl}, however
maintained for backward compatibility. A data set used to
calculate \code{par_tbl}, i.e. vectors of means and standard deviations
will be calculated from \emph{this} data set and applied to \code{data}.}
}
\value{
A center/scaled object of the same class as \code{data}. Only features
are modified for non-\code{matrix} objects.
}
\description{
A function to center and/or scale a data matrix (RFU table). Can be applied
to a \code{soma_adat}, tibble, data frame, or matrix object, but if a
matrix, should contain \emph{only} numeric columns (e.g. RFU data).
}
\section{Functions}{
\itemize{
\item \code{is.centerScaled()}: tests for presence of \code{par_tbl} entry in
attributes and if it contains appropriate parameter information that
can be used for centering or scaling data.

\item \code{undoCenterScale()}: the inverse of \code{centerScaleData()}. Undo the
transformation.

}}
\examples{
scaled <- centerScaleData(sim_test_data)
apply(strip_meta(scaled), 2, mean) |> sum()  # mean = 0
apply(strip_meta(scaled), 2, sd)             # sd = 1

# Pass parameters based on OTHER data
idx   <- withr::with_seed(1,
  sample(1:nrow(sim_test_data), size = nrow(sim_test_data) / 2)
)
train <- sim_test_data[idx, ]
test  <- sim_test_data[-idx, ]
new   <- centerScaleData(test, ref.data = train)

# However, it is preferred to pass `par_tbl` over `ref.data`
#   by creating a `par_tbl` object based on `train`
par <- tibble::tibble(AptName = SomaDataIO::getAnalytes(train),
                      means   = colMeans(strip_meta(train)),
                      sds     = apply(strip_meta(train), 2, sd))
new2 <- centerScaleData(test, par_tbl = par)
# Logical test
is.centerScaled(new)
# Example of `undoCenterScale()`; reverse above
old <- undoCenterScale(new)

# check values are reverted
all.equal(test, old)

}
\author{
Stu Field
}

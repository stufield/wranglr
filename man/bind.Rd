% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bind.R
\name{bind}
\alias{bind}
\alias{bind_intersect}
\alias{bind_union}
\title{Vertically Combine Data Frames by Intersect}
\usage{
bind_intersect(...)

bind_union(...)
}
\arguments{
\item{...}{Data frames to combine. Can also be a \emph{list} of data frames
to combine.}
}
\value{
A single data frame with the total number of rows =
\code{sum(sapply(..., nrow))}.
}
\description{
For \code{\link[=bind_intersect]{bind_intersect()}}: \code{\link[=rbind]{rbind()}} is used to vertically \strong{combine} data
frames based on the \emph{intersect} of their column names.
This creates \emph{fewer} columns than the original data, or at best the same
number of columns. The resulting data frame has the dimensions:
\itemize{
\item rows: \code{nrow(df1) + nrow(df2) + ... + nrow(df_n)}
\item cols: \code{intersect(names(...))}
}

For \code{\link[=bind_union]{bind_union()}}: \code{\link[=rbind]{rbind()}} is used to vertically \strong{merge}
data frames based on the \emph{union} of their column names. This creates
columns of \code{NAs} for the rows of a data frame with non-overlapping
column names. The resulting data frame has the dimensions:
\itemize{
\item rows: \code{nrow(df1) + nrow(df2) + ... + nrow(df_n)}
\item cols: \code{union(names(...))}
}
}
\details{
Incidentally, the default behavior of \code{\link[=rbind]{rbind()}} reorders the columns
correctly, but will only do so if their intersect matches.
}
\note{
For \code{\link[=bind_intersect]{bind_intersect()}}, columns are combined on
their \emph{intersect} only.

For \code{\link[=bind_union]{bind_union()}}, the ordering of the rows correspond
to the order they are supplied.
}
\examples{
# For `bind_intersect()`
spl <- split(mtcars, mtcars$cyl) |> unname()
foo <- mapply(spl, -c(11, 10, 9), FUN = function(x, y) x[, y], SIMPLIFY = FALSE)
sapply(spl, names)
sapply(spl, ncol)

# Pass a list
bind_intersect(spl)

# Can pass either list or via '...'
identical(bind_intersect(spl), bind_intersect(spl[[1L]], spl[[2L]], spl[[3L]]))

# Passing a *named* list adds `data` column with those names
names(spl) <- letters[1:3L]
bind_intersect(spl)

# For `bind_union()`
bind_union(spl)
bind_union(spl[[1L]], spl[[2L]])
bind_union(spl[[1L]], spl[[2L]], spl[[3L]])
}
\seealso{
\code{\link[=Reduce]{Reduce()}}, \code{\link[=rbind]{rbind()}}, \code{\link[=intersect]{intersect()}}

\code{\link[=union]{union()}}
}
\author{
Stu Field
}

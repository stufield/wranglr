% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rearrange.R
\name{rearrange}
\alias{rearrange}
\title{Rearrange Rows by Variables}
\usage{
rearrange(tbl, var, x)
}
\arguments{
\item{tbl}{A data frame or tibble object.}

\item{var}{Character. The variable name (column).}

\item{x}{A vector of values used to sort and match.}
}
\value{
A reordered, and possibly filtered, object of the
same class as \code{tbl}.
}
\description{
Rearrange (reorder) and possibly filter the rows
of a data frame or tibble object according to a
matched vector. Similar to \code{\link[dplyr:filter]{dplyr::filter()}}
and \code{\link[dplyr:arrange]{dplyr::arrange()}}, however the
ordering is based on an external object \code{x},
rather than a variable contained in \code{tbl}.
}
\details{
This function is meant to act as a working solution to
the lack of row names inherent to tibble objects, yet
still plays nice with "tidyverse" syntax.

Values in \code{x} that are not in \code{tbl[[var]]}
are silently dropped. Values in \code{tbl[[var]]} that are
not in \code{x} are silently filtered.

Duplicates in \code{x} are silently dropped to avoid
creating extra rows in \code{tbl}, whereas duplicates
in \code{var} are maintained.
}
\examples{
df <- tibble::tibble(name = letters[1:4], x = 1:4, y = rnorm(4))
df

rearrange(df, "name", c("c","b","d"))

rearrange(df, "name", "d")

rearrange(df, "name", c("a","c","z"))  # "z" is dropped

rearrange(df, "name", c("a","c","c"))  # duplicate "c" is dropped
}
\seealso{
\code{\link[=match]{match()}}
}
\author{
Stu Field
}

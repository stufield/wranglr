% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/revertAptNames.R
\name{revertAptNames}
\alias{revertAptNames}
\alias{revertAptNames.soma_adat}
\alias{revertAptNames.character}
\alias{is_reverted}
\alias{convertAptNames}
\title{Revert and Convert Aptamer Names}
\usage{
revertAptNames(x, ...)

\method{revertAptNames}{soma_adat}(x, tbl = NULL, ...)

\method{revertAptNames}{character}(x, tbl, ...)

is_reverted(x)

convertAptNames(x)
}
\arguments{
\item{x}{For \code{\link[=revertAptNames]{revertAptNames()}}, either a \code{soma_adat} object or a
character string of \code{Anonymous-AptNames} (i.e. \code{seq.1234.23} format).
For \code{\link[=convertAptNames]{convertAptNames()}}, either a \code{soma_adat} or character string in
the \emph{old} \code{GeneID-AptName} format.}

\item{...}{For extensibility to downstream methods.}

\item{tbl}{An annotations table (e.g. \code{tibble}), containing \code{SeqId}
information and \code{EntrezGeneSymbol} information. This is typically
a call to \code{\link[SomaDataIO:getAnalyteInfo]{SomaDataIO::getAnalyteInfo()}}, but could be any annotations
object. Most importantly, annotations are time-specific, and therefore
this table must be \emph{from the snapshot in time you wish to revert to}.
Sometimes this may be an original training data set, or even an
annotations table close to the desired time point.}
}
\value{
\code{\link[=revertAptNames]{revertAptNames()}}: object corresponding to type \code{x} with
the \emph{old} \code{ABCD.XXXX.XX} format (containing \code{GeneId} symbols).

\code{\link[=is_reverted]{is_reverted()}}: logical. Whether \code{x} is a \code{soma_adat}
object that has been reverted.

\code{\link[=convertAptNames]{convertAptNames()}}: object corresponding to type \code{x} with
the \emph{new} \code{seq.XXXX.XX} format (i.e. with a \code{seq.} prefix).
}
\description{
Legacy \code{AptNames}, features in ADATs, typically are
formatted by concatenating \code{EntrezGeneSymbols} with
\code{SeqIds}. This convention  changed to \code{seq.1234.56} to increase consistency
as the \code{GeneID} database changes. To enable legacy code to
run, this function enables you to reconstruct the legacy
\code{GeneID-AptName} format of a \code{soma_adat} object.
For example: \code{seq.1224.23} -> \code{ABCD.1234.23}
Please also see the \code{vignette("GeneIDs-AptNames")} for a more
comprehensive discussion on the topic.

\code{\link[=is_reverted]{is_reverted()}} checks whether an object
has been reverted via \code{\link[=revertAptNames]{revertAptNames()}}.

\code{\link[=convertAptNames]{convertAptNames()}} renames an ADAT with the \emph{old} \code{GeneID-AptName} format
to the new "\code{Anonymous-AptName}" format.
For example: \code{ABCD.1234.23} -> \code{seq.1224.23}.
}
\details{
As a rough approximation, \code{\link[=revertAptNames]{revertAptNames()}} attempts to reconstruct
the \code{GeneIDs} from the \emph{existing} annotations in \code{x}, i.e. by a
call to \code{\link[SomaDataIO:getAnalyteInfo]{SomaDataIO::getAnalyteInfo()}}, and then using that information,
if systematically matches \code{SeqIds} in the names of \code{x} with the \code{SeqIds}
in the annotations table. It is important to not that these annotations
(the \code{Col.Meta} attribute) represents a snapshot in time, the information
available in the database \emph{when the ADAT was created}. Therefore, GeneIDs
can change as the information in the database and our understanding
about reagent-target binding changes. As a result, \code{\link[=revertAptNames]{revertAptNames()}}
may be imperfect if the contemporary annotations in the \code{Col.Meta} differ
from the snapshot in the past you wish to revert to.
}
\examples{
adat <- splyr:::sample.adat
adat[, 20:30L]

# go back to old format
adat <- revertAptNames(adat)
is_reverted(adat)

adat[, 20:30L]

# convert back to new format
adat <- convertAptNames(adat)
adat[, 20:30L]

# revert also works on character class
# but you must pass a `tbl` of annotations
apts <- names(adat)[20:30L]
revertAptNames(
  apts,
  tbl = splyr:::apt_data
)

# non-seqId characters are not mapped backward
revertAptNames(c("foo", "seq.2211.9", "bar"), splyr:::apt_data)

# non-seqId characters are not mapped forward
convertAptNames(c("foo", "ABCD.2211.9", "bar", "MMP12.9898.3"))
}
\author{
Stu Field
}
